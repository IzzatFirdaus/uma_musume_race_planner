// ✅ Already updated for 2025 schema (rely on resolved labels from backend)
function showToast(message, type = "success") {
  alert(message); // Replace later with Bootstrap Toast
}

import { populatePlanModal, handlePlanFormSubmit } from "./modal.backup";
import { getGradeBadgeClass } from "./constants.js";
import {
  renderAttributesTable,
  renderSkillsTable,
  renderSuitabilityTable,
  renderRacePredictions,
  renderGoalsTable,
} from "./renderHelpers.backup";
import {
  attachActionEventHandlers,
  initFilterForm
} from "./formEvents.js";
import { setupAutoPlanTitle } from "./utils.backup";

// DOM Refs
const newPlanBtn = document.getElementById("newPlanBtn");
const createPlanBtn = document.getElementById("createPlanBtn");
const planModalElement = document.getElementById("planModal");
const planModal = planModalElement ? new bootstrap.Modal(planModalElement) : null;
const planTableBody = document.getElementById("planTableBody");
const planDetailsSection = document.getElementById("planDetails");
const quickPlanForm = document.getElementById("quickPlanForm");
const recentActivityContainer = document.getElementById("recentActivityContainer");

function timeAgo(dateString) {
  const now = new Date();
  const past = new Date(dateString);
  const seconds = Math.floor((now - past) / 1000);
  const intervals = {
    year: 31536000, month: 2592000, day: 86400,
    hour: 3600, minute: 60, second: 1,
  };
  for (const i in intervals) {
    const count = Math.floor(seconds / intervals[i]);
    if (count > 0) return `${count} ${i}${count > 1 ? 's' : ''} ago`;
  }
  return "just now";
}

function renderPlanRows(plans) {
  planTableBody.innerHTML = "";
  if (!plans || plans.length === 0) {
    planTableBody.innerHTML = `<tr><td colspan="9" class="text-center">No plans found matching your criteria.</td></tr>`;
    return;
  }

  plans.forEach((plan) => {
    const row = `
      <tr>
        <td><a href="#" class="view-plan-btn" data-id="${plan.id}">${plan.plan_title}</a></td>
        <td>${plan.name}</td>
        <td>${plan.race_name}</td>
        <td>${plan.career_stage}</td>
        <td>${plan.class}</td>
        <td>${plan.strategy || "-"}</td>
        <td><span class="badge ${getGradeBadgeClass(plan.status)}">${plan.status}</span></td>
        <td>
          <button class="btn btn-sm btn-info edit-plan-btn" data-id="${plan.id}"><i class="bi bi-pencil"></i></button>
          <button class="btn btn-sm btn-danger delete-plan-btn" data-id="${plan.id}"><i class="bi bi-trash"></i></button>
          <a href="export_plan.php?id=${plan.id}" class="btn btn-sm btn-success"><i class="bi bi-download"></i></a>
        </td>
      </tr>`;
    planTableBody.insertAdjacentHTML("beforeend", row);
  });

  attachActionEventHandlers();
}

async function viewPlan(planId) {
  try {
    const res = await fetch(`get_plans.php?id=${planId}`);
    const result = await res.json();
    if (result.success && result.plans.length > 0) {
      const plan = result.plans[0];
      const details = document.querySelector(".plan-details-content");
      if (!details) return;

      const created = new Date(plan.created_at).toLocaleString();
      const updated = plan.updated_at ? new Date(plan.updated_at).toLocaleString() : "N/A";

      details.innerHTML = `
        <div class="row mb-3">
          <div class="col-md-6">
            <h3>${plan.name} - ${plan.race_name}</h3>
            <p><strong>Plan Title:</strong> ${plan.plan_title}</p>
            <p><strong>Career Stage:</strong> ${plan.career_stage}</p>
            <p><strong>Class:</strong> ${plan.class}</p>
            <p><strong>Strategy:</strong> ${plan.strategy}</p>
            <p><strong>Status:</strong> <span class="badge ${getGradeBadgeClass(plan.status)}">${plan.status}</span></p>
            <p><strong>Created:</strong> ${created}</p>
            <p><strong>Last Updated:</strong> ${updated}</p>
          </div>
          <div class="col-md-6">
            <p><strong>Turn Before Race:</strong> ${plan.turn_before}</p>
            <p><strong>Time of Day:</strong> ${plan.time_of_day || "-"}</p>
            <p><strong>Month:</strong> ${plan.month}</p>
            <p><strong>Total SP:</strong> ${plan.total_available_skill_points}</p>
            <p><strong>Acquired Skill:</strong> ${plan.acquire_skill || "—"}</p>
            <p><strong>Condition:</strong> ${plan.condition || "—"}</p>
            <p><strong>Mood:</strong> ${plan.mood || "—"}</p>
            <p><strong>Energy:</strong> ${plan.energy ?? "N/A"}%</p>
            <p><strong>Race Day:</strong> ${plan.race_day === 'yes' ? "Yes" : "No"}</p>
            <p><strong>Goal:</strong> ${plan.goal || "—"}</p>
          </div>
        </div>

        <h4>Growth Rates</h4>
        <div class="attribute-grid mb-3">
          <div class="card card-body text-center p-2">Speed: ${plan.growth_rate_speed}%</div>
          <div class="card card-body text-center p-2">Stamina: ${plan.growth_rate_stamina}%</div>
          <div class="card card-body text-center p-2">Power: ${plan.growth_rate_power}%</div>
          <div class="card card-body text-center p-2">Guts: ${plan.growth_rate_guts}%</div>
          <div class="card card-body text-center p-2">Wit: ${plan.growth_rate_wit}%</div>
        </div>

        ${renderAttributesTable(plan.attributes)}
        ${renderSkillsTable(plan.skills)}
        ${renderSuitabilityTable(plan.terrain_grades, "terrain")}
        ${renderSuitabilityTable(plan.distance_grades, "distance")}
        ${renderSuitabilityTable(plan.style_grades, "style")}
        ${renderRacePredictions(plan.race_predictions)}
        ${renderGoalsTable(plan.goals)}

        <h4 class="mt-4">Turns Breakdown</h4>
        <div class="table-responsive mb-3">
          <table class="table table-bordered table-striped align-middle">
            <thead class="table-light">
              <tr><th>Turn</th><th>Speed</th><th>Stamina</th><th>Power</th><th>Guts</th><th>Wit</th></tr>
            </thead>
            <tbody>
              ${plan.turns?.map(t => `
                <tr><td>${t.turn_number}</td><td>${t.speed}</td><td>${t.stamina}</td><td>${t.power}</td><td>${t.guts}</td><td>${t.wit}</td></tr>
              `).join("")}
            </tbody>
          </table>
        </div>

        <div class="d-flex justify-content-end gap-2 mt-4 no-print">
          <button class="btn btn-uma edit-plan-btn" data-id="${plan.id}">
            <i class="bi bi-pencil me-1"></i> Edit Plan
          </button>
          <button class="btn btn-secondary" onclick="window.print()">
            <i class="bi bi-printer me-1"></i> Print Plan
          </button>
        </div>`;

      planDetailsSection.style.display = "block";
      window.scrollTo({ top: 0, behavior: "smooth" });

      document.querySelector("#planDetails .edit-plan-btn")?.addEventListener("click", () => {
        populatePlanModal(plan, true);
        setTimeout(() => {
          const form = document.getElementById("planForm");
          if (form) form.onsubmit = (e) => handlePlanFormSubmit(e, planModal);
          planModal?.show();
        }, 100);
      });
    } else {
      alert("Plan not found.");
    }
  } catch (err) {
    console.error(err);
    alert("Error loading plan.");
  }
}

async function loadRecentActivity() {
  if (!recentActivityContainer) return;
  recentActivityContainer.innerHTML = `Loading...`;
  try {
    const res = await fetch("get_recent_activity.php");
    const result = await res.json();
    if (result.success) {
      recentActivityContainer.innerHTML = "";
      result.data.forEach(act => {
        const item = `<div><strong>${act.type}:</strong> ${act.description} <small>${timeAgo(act.timestamp)}</small></div>`;
        recentActivityContainer.insertAdjacentHTML("beforeend", item);
      });
    } else {
      recentActivityContainer.innerHTML = "Failed to load activity.";
    }
  } catch (err) {
    recentActivityContainer.innerHTML = "Error fetching activity.";
  }
}

if (quickPlanForm) {
  quickPlanForm.addEventListener("submit", async (e) => {
    e.preventDefault();
    const data = Object.fromEntries(new FormData(quickPlanForm).entries());
    try {
      const res = await fetch("save_plan.php", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data),
      });
      const result = await res.json();
      if (result.success) {
        showToast("Plan created!");
        quickPlanForm.reset();
        renderPlanRows([result.plan]);
        loadRecentActivity();
      } else {
        alert("Failed to save plan.");
      }
    } catch (err) {
      console.error("Save error:", err);
    }
  });
}

[newPlanBtn, createPlanBtn].forEach((btn) => {
  btn?.addEventListener("click", () => {
    populatePlanModal({}, false);
    setTimeout(() => {
      const form = document.getElementById("planForm");
      if (form) form.onsubmit = (e) => handlePlanFormSubmit(e, planModal);
      planModal?.show();
    }, 100);
  });
});

document.addEventListener("DOMContentLoaded", () => {
  setupAutoPlanTitle();
  loadRecentActivity();
  initFilterForm(data => {
    if (data.success) renderPlanRows(data.plans);
    else showToast(data.message || "Failed to load", "danger");
  });
});

document.getElementById("planJsonFile")?.addEventListener("change", (e) => {
  const file = e.target.files[0];
  if (!file) return;
  const reader = new FileReader();
  reader.onload = (event) => {
    try {
      const data = JSON.parse(event.target.result);
      const preview = document.createElement("pre");
      preview.className = "alert alert-secondary mt-3";
      preview.id = "jsonPreview";
      preview.style.maxHeight = "200px";
      preview.style.overflowY = "auto";
      preview.innerText = JSON.stringify(data, null, 2);
      e.target.closest("form").appendChild(preview);
    } catch {
      alert("Invalid JSON.");
    }
  };
  reader.readAsText(file);
});

export { viewPlan, renderPlanRows, loadRecentActivity };
