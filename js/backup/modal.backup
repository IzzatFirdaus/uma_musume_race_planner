// js/modal.js

import {
  careerStageOptions, classOptions, strategyOptions, moodOptions,
  attributeGradeOptions, predictionIconOptions,
  terrainTypeOptions, distanceTypeOptions, styleTypeOptions,
  timeOfDayOptions, monthOptions, skillsList, skillTagOptions
} from "./constants.js";

function renderSelect(id, name, options, selected = "") {
  return `
    <select class="form-select" id="${id}" name="${name}" aria-label="${name}">
      <option value="">Select ${name.replace(/_/g, " ")}</option>
      ${options.map(opt => {
        const val = typeof opt === "object" ? opt.value : opt;
        const text = typeof opt === "object" ? opt.text : opt;
        return `<option value="${val}" ${val == selected ? "selected" : ""}>${text}</option>`;
      }).join("")}
    </select>
  `;
}

function renderAttributeRow(data = {}) {
  return `
    <div class="row mb-2 attribute-row dynamic-row">
      <div class="col-5">
        <input type="text" name="attribute_name[]" class="form-control" placeholder="Attribute" value="${data.attribute_name || ""}">
      </div>
      <div class="col-3">
        <input type="number" name="attribute_value[]" class="form-control" placeholder="Value" value="${data.attribute_value || ""}">
      </div>
      <div class="col-3">
        ${renderSelect(`attr_grade_${crypto.randomUUID()}`, "attribute_grade[]", attributeGradeOptions, data.attribute_grade)}
      </div>
      <div class="col-1 d-flex align-items-center">
        <button type="button" class="btn btn-danger btn-sm remove-row-btn"><i class="bi bi-x-circle"></i></button>
      </div>
    </div>
  `;
}

function renderSkillRow(data = {}) {
  return `
    <div class="row mb-2 skill-row dynamic-row">
      <div class="col-4">
        <input type="text" name="skill_name[]" class="form-control" placeholder="Skill Name" list="skillsListOptions" value="${data.skill_name || ""}">
        <datalist id="skillsListOptions">
          ${skillsList.map(s => `<option value="${s.name}">${s.name}</option>`).join("")}
        </datalist>
      </div>
      <div class="col-2">
        <input type="number" name="sp_cost[]" class="form-control" placeholder="SP Cost" value="${data.sp_cost || ""}">
      </div>
      <div class="col-2">
        ${renderSelect(`skill_acq_${crypto.randomUUID()}`, "acquired[]", [
          { value: "✅", text: "Acquired" },
          { value: "❌", text: "Not Acquired" }
        ], data.acquired)}
      </div>
      <div class="col-3">
        ${renderSelect(`skill_tag_${crypto.randomUUID()}`, "tag[]", skillTagOptions, data.tag)}
      </div>
      <div class="col-1 d-flex align-items-center">
        <button type="button" class="btn btn-danger btn-sm remove-row-btn"><i class="bi bi-x-circle"></i></button>
      </div>
    </div>
  `;
}

function renderSuitabilityRow(type, data = {}) {
  const options = {
    terrain: terrainTypeOptions,
    distance: distanceTypeOptions,
    style: styleTypeOptions,
  }[type];

  return `
    <div class="row mb-2 suitability-row dynamic-row">
      <div class="col-5">
        ${renderSelect(`${type}_${crypto.randomUUID()}`, `${type}[]`, options, data[type])}
      </div>
      <div class="col-5">
        ${renderSelect(`${type}_grade_${crypto.randomUUID()}`, `${type}_grade[]`, attributeGradeOptions, data.grade)}
      </div>
      <div class="col-1 d-flex align-items-center">
        <button type="button" class="btn btn-danger btn-sm remove-row-btn"><i class="bi bi-x-circle"></i></button>
      </div>
    </div>
  `;
}

function renderGenericRow(name, fields, data = {}) {
  return `
    <div class="row mb-2 ${name}-row dynamic-row">
      ${fields.map(field => `
        <div class="${field.col || 'col-6'}">
          <input type="${field.type}" name="${name}[][${field.name}]" class="form-control" placeholder="${field.placeholder}" value="${data[field.name] || ""}">
        </div>
      `).join("")}
      <div class="col-1 d-flex align-items-center">
        <button type="button" class="btn btn-danger btn-sm remove-row-btn"><i class="bi bi-x-circle"></i></button>
      </div>
    </div>
  `;
}

export function populatePlanModal(plan = {}, isEdit = false) {
  const form = document.getElementById("planForm");
  const title = document.getElementById("planModalLabel");
  const idInput = document.getElementById("planId");

  form.reset();
  idInput.value = plan.id || "";
  title.textContent = isEdit ? `Edit Plan: ${plan.plan_title || plan.name}` : "Create New Plan";

  const reset = id => document.getElementById(id).innerHTML = "";
  ["attributesContainer", "skillsContainer", "terrainGradesContainer", "distanceGradesContainer", "styleGradesContainer", "goalsContainer", "turnsContainer"].forEach(reset);

  if (isEdit) {
    Object.entries(plan).forEach(([key, val]) => {
      const el = form.elements[key];
      if (el) el.value = val;
    });

    (plan.attributes || []).forEach(addAttributeRow);
    (plan.skills || []).forEach(addSkillRow);
    (plan.terrain_grades || []).forEach(d => addSuitabilityRow("terrain", d));
    (plan.distance_grades || []).forEach(d => addSuitabilityRow("distance", d));
    (plan.style_grades || []).forEach(d => addSuitabilityRow("style", d));
    (plan.goals || []).forEach(addGoalRow);
    (plan.turns || []).forEach(addTurnRow);
  } else {
    addAttributeRow(); addSkillRow();
    addSuitabilityRow("terrain"); addSuitabilityRow("distance"); addSuitabilityRow("style");
    addGoalRow(); addTurnRow();
  }

  attachEventListeners();
}

function attachEventListeners() {
  document.querySelectorAll(".remove-row-btn").forEach(btn =>
    btn.onclick = () => btn.closest(".dynamic-row")?.remove()
  );

  document.getElementById("addAttributeBtn").onclick = () => addAttributeRow();
  document.getElementById("addSkillBtn").onclick = () => addSkillRow();
  document.getElementById("addTerrainGradeBtn").onclick = () => addSuitabilityRow("terrain");
  document.getElementById("addDistanceGradeBtn").onclick = () => addSuitabilityRow("distance");
  document.getElementById("addStyleGradeBtn").onclick = () => addSuitabilityRow("style");
  document.getElementById("addGoalBtn").onclick = () => addGoalRow();
  document.getElementById("addTurnBtn").onclick = () => addTurnRow();
}

function addAttributeRow(data = {}) {
  document.getElementById("attributesContainer").insertAdjacentHTML("beforeend", renderAttributeRow(data));
}
function addSkillRow(data = {}) {
  document.getElementById("skillsContainer").insertAdjacentHTML("beforeend", renderSkillRow(data));
}
function addSuitabilityRow(type, data = {}) {
  document.getElementById(`${type}GradesContainer`).insertAdjacentHTML("beforeend", renderSuitabilityRow(type, data));
}
function addGoalRow(data = {}) {
  document.getElementById("goalsContainer").insertAdjacentHTML("beforeend", renderGenericRow("goals", [
    { name: "goal", placeholder: "Goal Description", col: "col-6", type: "text" },
    { name: "result", placeholder: "Result", col: "col-4", type: "text" }
  ], data));
}
function addTurnRow(data = {}) {
  document.getElementById("turnsContainer").insertAdjacentHTML("beforeend", renderGenericRow("turns", [
    { name: "turn_number", placeholder: "Turn #", col: "col-2", type: "number" },
    { name: "speed", placeholder: "Speed", col: "col-2", type: "number" },
    { name: "stamina", placeholder: "Stamina", col: "col-2", type: "number" },
    { name: "power", placeholder: "Power", col: "col-2", type: "number" },
    { name: "guts", placeholder: "Guts", col: "col-2", type: "number" },
    { name: "wit", placeholder: "Wit", col: "col-2", type: "number" },
  ], data));
}

export async function handlePlanFormSubmit(e, modalInstance) {
  e.preventDefault();
  const form = e.target;
  const formData = new FormData(form);
  const planData = {};

  formData.forEach((value, key) => {
    if (key.endsWith("[]")) {
      const cleanKey = key.replace("[]", "");
      if (!planData[cleanKey]) planData[cleanKey] = [];
      planData[cleanKey].push(value);
    } else if (/\[\d*\]\[\w+\]/.test(key)) {
      const [, base, nested] = key.match(/^([^\[]+)\[\d*\]\[([^\]]+)\]$/) || [];
      if (base) {
        planData[base] = planData[base] || [];
        const idx = planData[base].length - 1;
        if (idx < 0 || planData[base][idx][nested]) {
          planData[base].push({ [nested]: value });
        } else {
          planData[base][idx][nested] = value;
        }
      }
    } else {
      planData[key] = value;
    }
  });

  try {
    const res = await fetch("save_plan.php", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(planData)
    });
    const json = await res.json();
    if (json.success) {
      alert("Plan saved successfully.");
      modalInstance?.hide();
      window.loadPlans?.();
      window.loadStats?.();
      window.loadRecentActivity?.();
    } else {
      alert("Failed to save: " + (json.error || "Unknown error"));
    }
  } catch (err) {
    console.error(err);
    alert("Error saving plan.");
  }
}
