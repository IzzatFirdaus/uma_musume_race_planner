// js/utils.js

/**
 * Debounce utility to limit rapid API calls.
 * @param {Function} fn - The function to debounce.
 * @param {number} delay - Delay in milliseconds.
 * @returns {Function}
 */
export function debounce(fn, delay = 300) {
  let timer;
  return (...args) => {
    clearTimeout(timer);
    timer = setTimeout(() => fn(...args), delay);
  };
}

/**
 * Attach autosuggestion behavior to an input field using a datalist.
 * @param {string} field - The DB field to suggest (e.g., 'name', 'race_name').
 * @param {string} inputId - Input element ID.
 * @param {string} datalistId - Datalist element ID.
 */
export function fetchAutosuggestions(field, inputId, datalistId) {
  const input = document.getElementById(inputId);
  const datalist = document.getElementById(datalistId);
  if (!input || !datalist) return;

  let latestQuery = "";
  let controller = null;

  const loadSuggestions = async () => {
    const query = input.value.trim();
    if (!query) {
      datalist.innerHTML = "";
      return;
    }

    latestQuery = query;
    if (controller) controller.abort();
    controller = new AbortController();

    try {
      const res = await fetch(
        `get_autosuggest.php?field=${encodeURIComponent(field)}&term=${encodeURIComponent(query)}`,
        { signal: controller.signal }
      );
      const suggestions = await res.json();

      if (query !== latestQuery) return;

      datalist.innerHTML = "";
      (suggestions || []).forEach(val => {
        const option = document.createElement("option");
        const text = typeof val === "object" && val.value ? val.value : String(val);
        option.value = text;
        option.label = text;
        datalist.appendChild(option);
      });
    } catch (e) {
      if (e.name !== "AbortError") {
        console.error(`Error fetching autosuggestions for ${field}:`, e);
        datalist.innerHTML = "";
      }
    }
  };

  input.addEventListener("input", debounce(loadSuggestions, 500));
}

/**
 * Automatically populate the plan title based on month, race name, and trainee.
 * Triggered on input changes.
 */
export function setupAutoPlanTitle() {
  const nameEl = document.getElementById("traineeName");
  const raceEl = document.getElementById("raceName");
  const monthEl = document.getElementById("month");
  const titleEl = document.getElementById("planTitle");

  if (!nameEl || !raceEl || !monthEl || !titleEl) return;

  const updateTitle = () => {
    const name = nameEl.value.trim();
    const race = raceEl.value.trim();
    const monthText = monthEl.options[monthEl.selectedIndex]?.text || "";

    if (name && race) {
      titleEl.value = `${monthText} ${race} (${name})`;
    }
  };

  [nameEl, raceEl, monthEl].forEach(el => {
    el.addEventListener("input", updateTitle);
    el.addEventListener("change", updateTitle); // for selects
  });
}
